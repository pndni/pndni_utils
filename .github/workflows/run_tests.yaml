# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# Official DOc on GitHub Workflow Syntax: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions

# Conda based env testing: https://github.com/conda-incubator/setup-miniconda
name: Run tests

on:

  # Trigger the workflow on push but only for the master branch
  push:
    branches:
      - mb/github_actions

  # Trigger current workflow on PR from ANY branch
  pull_request:
    branches:
      - '*'

env:
  # Even when given -y, apt will still sometimes hang at a prompt if a package
  # has clarifications to ask; DEBIAN_FRONTEND=noninteractive prevents that,
  # This will be defined for non-debian platforms below too, but there's no harm in that.
  # (TravisCI quietly defined this on all their platforms, but we have to give it manually on GithubCI.)
  DEBIAN_FRONTEND: 'noninteractive'

jobs:
  ultra_matrix_test:
    name: Matrix Test of Python ${{ matrix.python-version }} on ${{ matrix.os }}

    # Matrix driven OS
    runs-on: ${{ matrix.os }}

    # Default shell for ALL subsequent steps.
    defaults:
      run:
        shell: bash -l {0}

    # Defining matrix for OS and Python
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "macos-latest", "windows-latest" ]
        python-version: [ "3.6" ]

    # Main steps for the test to be reproduced across OS x Python
    steps:
      # Step 0: Checkout code & setup python.
      - uses: actions/checkout@v2
      # Step 1: List main repo by time modified, and print path
      - name: List all current repository files and modification date
        # Parameters.
        run: |
          ls -lasth
          pwd
      # Step 2: List main repo by time modified, and print path
      - name: Set up Python 3.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.6
      # Step 3: Install environment.
      - name: create environment
        run: |
          pip install virtualenv
          if [ "$RUNNER_OS" == "macOS-latest" ]; then
                echo "/Library/Frameworks/Python.framework/Versions/2.7/bin" >> $GITHUB_PATH
          fi
          virtualenv .venv
      # Step 4: List python env info packages
      - name: Python packages info
        # List
        run: |
          pip freeze
      # Step 5: Activate and Install main repository
      - name: Installation of the main repository
        run: |
          source activate .venv
          pip install --verbose -e .
      # Step 6: Conda list packages POST installation.
      - name: Conda list post installation
        # List
        run: |
          pip freeze
      # Step 7: Full PyTest
      - name: Test with pytest
        run: |
          pip install coveralls
          pytest . -v
